{"ast":null,"code":"// Reduktor to funkcja, która wymaga stanu i akcji.\n// Wykonuje na tej podstawie obliczenia i zwraca nowy stan.\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { loadState } from \"./StorageHandler\";\nconst cartContent = [{\n  id: 1,\n  name: 'Laptop',\n  price: 5000,\n  amount: 1\n}, {\n  id: 2,\n  name: 'Keyboard',\n  price: 200,\n  amount: 2\n}];\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    //cart: cartContent\n    cart: loadState().cart.cart\n  },\n  reducers: {\n    addProduct: (state, action) => {\n      let productInCart = false;\n      state.cart.forEach(product => {\n        if (product.id === action.payload.id) {\n          productInCart = true;\n        }\n      });\n\n      if (productInCart) {\n        state.cart = state.cart.map(product => product.id === action.payload.id ? { ...product,\n          amount: product.amount + 1\n        } : product);\n      } else {\n        state.cart.push(action.payload);\n      }\n    },\n    changeAmount: (state, action) => {\n      state.cart = state.cart.map(product => product.id === action.payload.id ? { ...product,\n        amount: action.payload.amount\n      } : product);\n    },\n    removeProduct: (state, action) => {\n      state.cart = state.cart.filter(product => {\n        return product.id !== action.payload.id;\n      });\n    }\n  }\n});\nexport const {\n  addProduct,\n  changeAmount,\n  removeProduct\n} = cartSlice.actions;\nexport default cartSlice.reducer;\n/*\r\n1. Dodaj możliwość usuwania produktów z koszyka.\r\n2. Dodaj możliwość dodawania do koszyka.\r\n    1. Należy sprawdzić, czy produkt jest już w koszyku.\r\n*/","map":{"version":3,"names":["createSlice","loadState","cartContent","id","name","price","amount","cartSlice","initialState","cart","reducers","addProduct","state","action","productInCart","forEach","product","payload","map","push","changeAmount","removeProduct","filter","actions","reducer"],"sources":["D:/Development/redux/src/redux/RootReducer.js"],"sourcesContent":["// Reduktor to funkcja, która wymaga stanu i akcji.\r\n// Wykonuje na tej podstawie obliczenia i zwraca nowy stan.\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport { loadState } from \"./StorageHandler\";\r\n\r\nconst cartContent = [\r\n    { id: 1, name: 'Laptop', price: 5000, amount: 1 },\r\n    { id: 2, name: 'Keyboard', price: 200, amount: 2 },\r\n];\r\n\r\nconst cartSlice = createSlice({\r\n    name: 'cart',\r\n    initialState: {\r\n        //cart: cartContent\r\n        cart: loadState().cart.cart\r\n    },\r\n    reducers: {\r\n        addProduct: (state, action) => {\r\n            let productInCart = false;\r\n            state.cart.forEach((product) => {\r\n                if (product.id === action.payload.id) {\r\n                    productInCart = true;\r\n                }\r\n            })\r\n\r\n            if (productInCart) {\r\n                state.cart = state.cart.map((product) => \r\n                product.id === action.payload.id\r\n                ? { ...product, amount: product.amount + 1 }\r\n                : product \r\n            )\r\n            } else {\r\n                state.cart.push(action.payload);\r\n            }\r\n            \r\n        },\r\n        changeAmount: (state, action) => {\r\n            state.cart = state.cart.map((product) => \r\n                product.id === action.payload.id\r\n                ? { ...product, amount: action.payload.amount }\r\n                : product \r\n            )\r\n        },\r\n        removeProduct: (state, action) => {\r\n            state.cart = state.cart.filter((product) => {\r\n                return product.id !== action.payload.id\r\n            })\r\n        }\r\n    }\r\n});\r\n\r\nexport const { addProduct, changeAmount, removeProduct } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n\r\n/*\r\n1. Dodaj możliwość usuwania produktów z koszyka.\r\n2. Dodaj możliwość dodawania do koszyka.\r\n    1. Należy sprawdzić, czy produkt jest już w koszyku.\r\n*/"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,MAAMC,WAAW,GAAG,CAChB;EAAEC,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE,QAAf;EAAyBC,KAAK,EAAE,IAAhC;EAAsCC,MAAM,EAAE;AAA9C,CADgB,EAEhB;EAAEH,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE,UAAf;EAA2BC,KAAK,EAAE,GAAlC;EAAuCC,MAAM,EAAE;AAA/C,CAFgB,CAApB;AAKA,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC1BI,IAAI,EAAE,MADoB;EAE1BI,YAAY,EAAE;IACV;IACAC,IAAI,EAAER,SAAS,GAAGQ,IAAZ,CAAiBA;EAFb,CAFY;EAM1BC,QAAQ,EAAE;IACNC,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3B,IAAIC,aAAa,GAAG,KAApB;MACAF,KAAK,CAACH,IAAN,CAAWM,OAAX,CAAoBC,OAAD,IAAa;QAC5B,IAAIA,OAAO,CAACb,EAAR,KAAeU,MAAM,CAACI,OAAP,CAAed,EAAlC,EAAsC;UAClCW,aAAa,GAAG,IAAhB;QACH;MACJ,CAJD;;MAMA,IAAIA,aAAJ,EAAmB;QACfF,KAAK,CAACH,IAAN,GAAaG,KAAK,CAACH,IAAN,CAAWS,GAAX,CAAgBF,OAAD,IAC5BA,OAAO,CAACb,EAAR,KAAeU,MAAM,CAACI,OAAP,CAAed,EAA9B,GACE,EAAE,GAAGa,OAAL;UAAcV,MAAM,EAAEU,OAAO,CAACV,MAAR,GAAiB;QAAvC,CADF,GAEEU,OAHW,CAAb;MAKH,CAND,MAMO;QACHJ,KAAK,CAACH,IAAN,CAAWU,IAAX,CAAgBN,MAAM,CAACI,OAAvB;MACH;IAEJ,CAnBK;IAoBNG,YAAY,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;MAC7BD,KAAK,CAACH,IAAN,GAAaG,KAAK,CAACH,IAAN,CAAWS,GAAX,CAAgBF,OAAD,IACxBA,OAAO,CAACb,EAAR,KAAeU,MAAM,CAACI,OAAP,CAAed,EAA9B,GACE,EAAE,GAAGa,OAAL;QAAcV,MAAM,EAAEO,MAAM,CAACI,OAAP,CAAeX;MAArC,CADF,GAEEU,OAHO,CAAb;IAKH,CA1BK;IA2BNK,aAAa,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;MAC9BD,KAAK,CAACH,IAAN,GAAaG,KAAK,CAACH,IAAN,CAAWa,MAAX,CAAmBN,OAAD,IAAa;QACxC,OAAOA,OAAO,CAACb,EAAR,KAAeU,MAAM,CAACI,OAAP,CAAed,EAArC;MACH,CAFY,CAAb;IAGH;EA/BK;AANgB,CAAD,CAA7B;AAyCA,OAAO,MAAM;EAAEQ,UAAF;EAAcS,YAAd;EAA4BC;AAA5B,IAA8Cd,SAAS,CAACgB,OAA9D;AAEP,eAAehB,SAAS,CAACiB,OAAzB;AAEA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}