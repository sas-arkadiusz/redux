{"ast":null,"code":"// Reduktor to funkcja, która wymaga stanu i akcji.\n// Wykonuje na tej podstawie obliczenia i zwraca nowy stan.\nimport { createSlice } from \"@reduxjs/toolkit\"; // W przeciństwie do Store - w naszej aplikacji moze istniec\n// wiele reduktorow.\n// 1. Stworzenie obiektu koszyka\n\nconst cartContent = [{\n  id: 1,\n  name: 'Laptop',\n  price: 5000,\n  amount: 1\n}, {\n  id: 2,\n  name: 'Keyboard',\n  price: 200,\n  amount: 2\n}]; // 2. Stworzenie plasterka stanu koszyka\n\nconst cartSlice = createSlice({\n  // 2.1. Nadanie nazwy plasterka\n  name: 'cart',\n  // 2.2. Nadanie stanu początkowego\n  initialState: {\n    // 2.3. Definiowanie pól w plasterku\n    cart: cartContent\n  },\n  // 3. Tworzymy reduktory do manipulowania danymi w obrębie\n  //    platerka cart\n  reducers: {\n    addProduct: (state, action) => {\n      // akcja ma pole \"payload\", które przechowuje przesłane dane\n      state.cart.push(action.payload);\n    }\n  }\n}); //export const addProduct = cartSlice.actions.addProduct;\n\nexport const {\n  addProduct\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartContent","id","name","price","amount","cartSlice","initialState","cart","reducers","addProduct","state","action","push","payload","actions","reducer"],"sources":["/Users/arkadiusz/Work/Development/react-szkolenie/redux-koszyk/redux-koszyk-demo/src/redux/RootReducer.js"],"sourcesContent":["// Reduktor to funkcja, która wymaga stanu i akcji.\n// Wykonuje na tej podstawie obliczenia i zwraca nowy stan.\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\n// W przeciństwie do Store - w naszej aplikacji moze istniec\n// wiele reduktorow.\n\n// 1. Stworzenie obiektu koszyka\nconst cartContent = [\n    { id: 1, name: 'Laptop', price: 5000, amount: 1 },\n    { id: 2, name: 'Keyboard', price: 200, amount: 2 },\n];\n\n// 2. Stworzenie plasterka stanu koszyka\nconst cartSlice = createSlice({\n    // 2.1. Nadanie nazwy plasterka\n    name: 'cart',\n    // 2.2. Nadanie stanu początkowego\n    initialState: {\n        // 2.3. Definiowanie pól w plasterku\n        cart: cartContent\n    },\n    // 3. Tworzymy reduktory do manipulowania danymi w obrębie\n    //    platerka cart\n    reducers: {\n        addProduct: (state, action) => {\n            // akcja ma pole \"payload\", które przechowuje przesłane dane\n            state.cart.push(action.payload);\n        }\n    }\n});\n\n//export const addProduct = cartSlice.actions.addProduct;\nexport const { addProduct }  = cartSlice.actions;\n\nexport default cartSlice.reducer;"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAG,CAChB;EAAEC,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE,QAAf;EAAyBC,KAAK,EAAE,IAAhC;EAAsCC,MAAM,EAAE;AAA9C,CADgB,EAEhB;EAAEH,EAAE,EAAE,CAAN;EAASC,IAAI,EAAE,UAAf;EAA2BC,KAAK,EAAE,GAAlC;EAAuCC,MAAM,EAAE;AAA/C,CAFgB,CAApB,C,CAKA;;AACA,MAAMC,SAAS,GAAGN,WAAW,CAAC;EAC1B;EACAG,IAAI,EAAE,MAFoB;EAG1B;EACAI,YAAY,EAAE;IACV;IACAC,IAAI,EAAEP;EAFI,CAJY;EAQ1B;EACA;EACAQ,QAAQ,EAAE;IACNC,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3B;MACAD,KAAK,CAACH,IAAN,CAAWK,IAAX,CAAgBD,MAAM,CAACE,OAAvB;IACH;EAJK;AAVgB,CAAD,CAA7B,C,CAkBA;;AACA,OAAO,MAAM;EAAEJ;AAAF,IAAkBJ,SAAS,CAACS,OAAlC;AAEP,eAAeT,SAAS,CAACU,OAAzB"},"metadata":{},"sourceType":"module"}